grammar com.shark.lang.Dd hidden(WS, CONT, IDENT)

generate dd "http://www.sharklang.org/lang/Dd"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//no empty entity and so mandatory BEGIN/END structure
//BEGIN / END added when there is an indent level change
//EOL tokens are added after an indent constant or no indent and a new line
//IDENT triggered after a Comment so generates EOL 
//with such grammar, comment are controlled for metrics and positioning --> not free anywhere --> there and concise
//TODO do a first output: flatbuffer and rocks and flutter crud screens 
//TODO remove inheritence 
//TODO add a control on the filename=datamodel name
//TODO either chr are kept and cannot accept escapes and so potentially add a char literal so we can store in a byte 127 ascii. or remove char.
//TODO error if no key attribute
//TODO defensive programming Make init mandatory for non key attributes except for string?
//TODO document the dd language itself better in the example and doc: about the use of expressions, size and precisions can be analysed recursively everywhere... 
//TODO test expressions interactively, re-read unit tests and enrich, and build non passing JUNIT tests using excel random
//TODO update formatter
//TODO add content assist
//TODO add control max 19 digits before and after on dec/int... because long 64 bits
//TODO bug precision/length check fails if there is a cast
//TODO allow array of types but check the size*size to emmit a warning or error (2Mb, 100Mb)
//TODO use long for INT and DEC size verification instead of int
//TODO customize error messages for parser and lexer: eg constant en maj
//TODO see other todos
//TODO add a control on max length of bits (32), and on precision+length<=18
//TODO use case of the unset value
//TODO test date operations + 1*DAY... basing on the generator error management
//TODO add min, max, avg
//TODO semantic highlighting example
//TODO finish moving up error message as constants and add more automatic unit tests
//TODO move checkOpertor to helper class
//TODO split into reusable grammar and create sd and sk languages
//TODO in this context consider removing int and stick to general dec(n,0)?
//TODO Improve calculateExpression and add it to the main descent of getExpressionType using a value extra member so that at least int(2,2)=90+20 fails
//TODO check and neutralize useless comment associator
//TODO check that all text is assigned
//TODO cleanup error messages in properties and second language support
//TODO bits could be a string expression or attribute in which case the content is not checked. Add bits length.
//TODO Unicity does not always work: on clean it fails because description from global index is null
//			1) based on debug, linking (LazyLinker.doLinkModel) is done after lexer/parser of course but mixed with validation in case of save. 
//				But done after each change like a fast validation. One could check how to disable this and do it like a NORMAL check
//       2) investigate the unicity check default (helper):
//				-remove it because this is duplicate effort with validation?
//				-tune it using the new notion of context do to a cross resource validation
//			3) current issue open in xtext for visibleContainer.getExportedObjectsByType being slow. to debug and see if override can be done
//			4) question on stack overflow//eclipse to resolve the fact that a clean does not work on unicity error
//TODO a single whitespace on a new line fails while a single tab works
//TODO expression is not possible to initiate bits
//TODO no default value on a key and no mandatory because this is explicit
//TODO unary function look ugly because they imply double parenthesis date(("2010"&"0101"))
//TODO a weakness of the expression syntax is that unary impose an extra bracket on other expressions like not( [true or false or true] )
//but that would require full re-write of a lot of check code in xtext and full re-write of the expression grammar
//and also the resulting syntax is a bit superfluous but is made very very readable if one uses a mix of { [ and (
//this is then a very verbose expression grammar but very easy to understand, and to modify by anyones...
DataModelFragment returns DataModelFragment:
	(modelDesc+=LineComment)+
	'model' name=OBJID EOL
	(constants+=Constant)*
	(entities+=Entity)*
	(constraints+=Constraint)*;


/////////////////////////
//A) Constants
////////////////////////
Constant returns Constant:
	(extraAttrDesc+=LineComment)*
	dataType=DataType
	(attributeSize=AttributeSize)?
	(arraySize=ArraySize)?
	name=CSTID
	('=' defaultValue=SharkExpression)
	(attrDesc=TrailComment)
	EOL;


//////////////////////////////////////////
//B) First Block of statements: entity block
////////////////////////////////////////////
Entity returns Entity:
	(entityDescLines+=LineComment)+
	name=OBJID ('->' extends=[Entity])? ':'
	BEGIN
	(attributes+=Attribute)+
	(relationships+=Relationship)*
	END;

////////////Statement 1 in First Block B) : Attributes
//all is initialized and we'll see if that creates perf issue.
//the unset value constant is either zero or Min and "". it can be overridden in ddt
Attribute returns Attribute:
	(extraAttrDesc+=LineComment)*
	dataType=DataType (attributeSize=AttributeSize)? 
	(arraySize=ArraySize)?
	name=ID
	('=' defaultValue=SharkExpression)?
	(primaryKey?='key')?
	(partitionKey?='partitionkey')?
	(mandatory?='!')?
	(deprecated?='deprecated')?
	(attrDesc=TrailComment) //mandatory description of the Attribute
	//	(nullable?='!null')? 
	EOL;

//valid for all types except date time and bool. for int, str and char it can be min max, for dec precision is mandatory
AttributeSize returns AttributeSize:
	('(' length=INT (',' precision=INT)? ')');
	
//not only for constants in this dd context, but also attribute. TODO check cassandra and flatbuuffer impact
ArraySize returns ArraySize:
	'[' size=INT ']'
;

////////////Statement 2 in First Block B) : Relationships
Relationship returns Relationship:
	(relDescLines+=LineComment)*
	cardi1=RangeExpression name=ID cardi2=RangeExpression linkTo=[Entity|OBJID]
	(relDesc=TrailComment) //mandatory description of the Attribute
	EOL;


///////////////////////////////////////////////
//C) Second Block of statements: check constraints block
//////////////////////////////////////////////////
Constraint returns Constraint:
	(chkDescLines+=LineComment)+
	name=CHKID ('(' firstEntity=([Entity|OBJID]) entitiesList+=(EntitiesListElt)* ')' )? ':'
	BEGIN
	(check+=CheckExpression)+
	END;
	
EntitiesListElt returns EntitiesListElt:
	',' entity=([Entity|OBJID]) isArray=('[]')?
;

////////////Statement 1 in second block C) : checks. If same name as entity they are intrinsic and executed systematically
//at each creation time of the object. The other need to be invoked: check myCust#Customer_Account_Crosschecks.all or .<id>
//because a full context with all objects is required and also a relationship is required to get the related objects
//crosschecks only work when called from the root object and descending the tree. Validation would be applied to all 
//children automatically
CheckExpression returns CheckExpression:
	(chkDesc+=LineComment)+
	name=ID expr=SharkExpression EOL;


///////////////////////////////////////////////
//D) underlying rules
///////////////////////////////////////////////
//reusable rules (expression, datatype rules...)
//below expression are very badly written but easy to understand
//Start was done with only Binary expressions with brackets and list expressions were added to avoid putting
//brackets everywhere. This still limits what is allowed to be written but makes it a style that is quite readable
//avoiding priority and errors of operators
//Note; syntactic predicate below works only if written in order of priority
//operation on datetime var: all is done on a time stamp and rounded/cut to keep only the interesting
//part like only the hours or the date... hence all date compatible
SharkExpression returns SharkExpression:
	=> RangeExpression |
	=> AddExpression | => MultExpression |
	=> AndExpression | => OrExpression |
	=> CatExpression | => ListExpression | 
	BinaryExpression | UnaryExpression |
	TerminalExpression 
	;

BinaryExpression returns BinaryExpression:
	(
	'(' left=SharkExpression op=BinaryOperator right=SharkExpression ')' |
	'[' left=SharkExpression op=BinaryOperator right=SharkExpression ']' |
	'{' left=SharkExpression op=BinaryOperator right=SharkExpression '}' 
	)
	 (exprValue=NUL precision=INT length=INT hasAttribute=INT)? //starting the sequence with NULL ensures it will never parse anything
	;

UnaryExpression returns UnaryExpression: 
	(
	op=UnaryOperator '(' left=SharkExpression ')' |
   op=UnaryOperator '[' left=SharkExpression ']' |
   op=UnaryOperator '{' left=SharkExpression '}' 
	)
	 (exprValue=NUL precision=INT length=INT hasAttribute=INT)?
	;

AddExpression returns AddExpression:
	(
	'(' left=SharkExpression op=('+' | '-') right=SharkExpression (addElts+=AddExpressionElt)+ ')' |
	'[' left=SharkExpression op=('+' | '-') right=SharkExpression (addElts+=AddExpressionElt)+ ']' |
	'{' left=SharkExpression op=('+' | '-') right=SharkExpression (addElts+=AddExpressionElt)+ '}' 
	)
	 (exprValue=NUL precision=INT length=INT hasAttribute=INT)?
	;

AddExpressionElt returns AddExpressionElt:
	op=('+') right=SharkExpression;

MultExpression returns MultExpression:
	(
	'(' left=SharkExpression op=('*') right=SharkExpression (multElts+=MultExpressionElt)+ ')' |
	'[' left=SharkExpression op=('*') right=SharkExpression (multElts+=MultExpressionElt)+ ']' |
	'{' left=SharkExpression op=('*') right=SharkExpression (multElts+=MultExpressionElt)+ '}' 
	)
	 (exprValue=NUL precision=INT length=INT hasAttribute=INT)?
	;

MultExpressionElt returns MultExpressionElt:
	op=('*') right=SharkExpression;

AndExpression returns AndExpression:
	(
	'(' left=SharkExpression op=('and') right=SharkExpression (andElts+=AndExpressionElt)+ ')' |
	'[' left=SharkExpression op=('and') right=SharkExpression (andElts+=AndExpressionElt)+ ']' |
	'{' left=SharkExpression op=('and') right=SharkExpression (andElts+=AndExpressionElt)+ '}' 
	)
	(exprValue=NUL hasAttribute=INT)?
	;

AndExpressionElt returns AndExpressionElt:
	op=('and') right=SharkExpression;

OrExpression returns OrExpression:
	(
	'(' left=SharkExpression op=('or') right=SharkExpression (orElts+=OrExpressionElt)+ ')' |
	'[' left=SharkExpression op=('or') right=SharkExpression (orElts+=OrExpressionElt)+ ']' |
	'{' left=SharkExpression op=('or') right=SharkExpression (orElts+=OrExpressionElt)+ '}' 
	)
	(exprValue=NUL hasAttribute=INT)?
	;

OrExpressionElt returns OrExpressionElt:
	op=('or') right=SharkExpression;

CatExpression returns CatExpression:
	(
	'(' left=SharkExpression op=('&') right=SharkExpression (catElts+=CatExpressionElt)+ ')' |
	'[' left=SharkExpression op=('&') right=SharkExpression (catElts+=CatExpressionElt)+ ']' |
	'{' left=SharkExpression op=('&') right=SharkExpression (catElts+=CatExpressionElt)+ '}' 	
	 )
	 (exprValue=NUL length=INT hasAttribute=INT)?
	;

CatExpressionElt returns CatExpressionElt:
	op=('&') right=SharkExpression;
	
//list only use brackets
ListExpression returns ListExpression:
	op='(' left=SharkExpression (ListElts+=ListExpressionElt)+ ')' 
	(exprValue=NUL hasAttribute=INT)?
	;

ListExpressionElt returns ListExpressionElt:
	op=(',') right=SharkExpression;
	
RangeExpression returns ListExpression:
	{ListExpression} '(' range=RANGE ')' |
	{ListExpression} => '(' range=RANGEINF ')'
;

enum BinaryOperator:
	opOr='or' | opAnd='and' | opAdd='+' | opMin='-' | opMult='*' | opDiv='/'
	| opMod='%' | opEq='==' | opGt='>' | opLt='<' | opLte='<=' | opGte='>=' | opPow='^'
	| opLike='like' | opDif='!=' | opCat='&'	| opIn='in' | opStxt='stxt' | opRound='round' 
;

enum UnaryOperator:
	opNot='not' | opNeg='-' | strCast='str' | intCast='int' | decCast='dec' | dateCast='date' |
	timeCast='time' | opLen='len' | stampCast='stamp';

TerminalExpression returns TerminalExpression:
	({StrValue} value=STR |
	{IntValue} value=INT |
	{DecValue} value=DEC |
	{ChrValue} value=CHR |
	{CstValue} value=[Constant|CSTID] (index=ArraySize)?|
	{BoolValue} value=Boolean |
	{UnsetValue} value=Unset |
	{AttributeValue} value=[Attribute|QualifiedName] (index=ArraySize)?)
	(exprValue=NUL hasAttribute=INT)?
	;

QualifiedName:
	(OBJID '.')? ID;

LineComment:
	{Comment} line=CMT EOL;

TrailComment:
	{Comment} line=CMT;

enum Unset:
	unset='unset';

enum Boolean:
	trueCst='true' |
	falseCst='false';

	//the unset value is used to process/validate types in validator but should not (cannot?) be typed in editor
enum DataType returns DataType:
	str='str' | dec='dec' | date='date' | time='time' | chr='chr' | int='int' | stamp='stamp' | bits='bits' | bool='bool'
	|
	unset='\uFFA0\uFFA0\uFFA0';
	//unset here allows to use the value in the validation logic but it will never be created by lexer


/////////////////////////////////////////////////////////
//E) TERMINALS / LEXER TOKENS: 
/////////////////////////////////////////////////////////
//TODO export in a re-usable sharkdsl grammar


//The following synthetic tokens are used for the indentation-aware blocks
//they are declared here and injected in the lexer in DDTokenSource Class
//to create from indentation position block begin and end token as well as statement end EOL token
terminal BEGIN:
	'synthetic:BEGIN'; // increase indentation
terminal END:
	'synthetic:END'; // decrease indentation
terminal EOL:
	'synthetic:EOL'; // allow to have a classical set of parser rule with end statement token like ; but not typed
terminal NUL:
	'synthetic:NUL'; // to create tokens that are never parsed but used in the processing and validation logic


//reused below
terminal fragment HEX:
	('0'..'9' | 'A'..'F' | 'a'..'f');

terminal fragment NUM:
	('0'..'9')+;

terminal fragment UNI:
	'u' HEX HEX HEX HEX;

terminal fragment ESC:
	'\\' ('t' | 'n' | 'r' | '"' | '\\' | UNI);

terminal fragment ASCII:
	('!' | '#' | '$' | '%' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0'..'9' | ' ' | ':' | ';' | '<'
	| '=' | '>' | '?' | '@' | 'A'..'Z' | '[' | ']' | '^' | '_' | '`' | 'a'..'z' | '{' | '|' | '}' | '~');

terminal fragment NL:
	('\r'? '\n');

//beware terminals are consumed in this order of precedence
//and lexer eats the longest possibility. caret removed
//string literals don't allow all escapes only common ones, and only double quotes
//and still need to put Unicode support for special char so \u is in
//with string compaction, non ASCII char is not encouraged in code/literals --> Unicode only
terminal STR returns ecore::EString:
	'"' (ESC | ASCII) (ESC | ASCII) (ESC | ASCII)* '"';

terminal CHR returns ecore::EString: //simpler to manage a string and remove quotes rather than using a value converter
//TODO consider using a value converter
	'"' (ESC | ASCII)? '"';

terminal RANGEINF returns ecore::EString:
	NUM '..n'
;

terminal RANGE returns ecore::EString:
	NUM '..' NUM
;

terminal CHKID returns ecore::EString:
	'#' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal CSTID returns ecore::EString:
	('A'..'Z') (('A'..'Z') | '_' | '0'..'9')*;

terminal OBJID returns ecore::EString:
	('A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

	//for members and local variables and functions
terminal ID returns ecore::EString:
	('a'..'z' | '_' | '~') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

	//although xtext doc advises datatype rule. kept like that if it fails will be educational, TBC
terminal DEC returns ecore::EBigDecimal:
	'-'? NUM '.' NUM;

terminal INT returns ecore::EInt:
	'-'? NUM;

terminal CONT returns ecore::EString:
	'\\' NL+;

	//convention with xtext and the WS terminal for indentation. I separate from blanks
terminal IDENT returns ecore::EString:
	(NL)+ ('\t')*;

terminal CMT returns ecore::EString:
	"'" !('\r' | '\n')*;

terminal WS returns ecore::EString:
	(' ' | '\t')+;

terminal ANY_OTHER returns ecore::EChar:
	.;